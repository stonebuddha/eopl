let a = 5 in
  let b = 6 in
    -(b, -(a, 10));
-(123, 44);
is_zero(0);
is_zero(1);
let a = 5 in
  if is_zero(a) then 5 else 4;
let a = -(5, 5) in
  if is_zero(a) then 5 else 4;
val a = 5;
val b = 6;
-(b, -(a, 10));
if is_zero(a) then 5 else 4;
let a = -(a, a) in
  if is_zero(a) then 5 else 4;
let f = proc (x) -(x, 11) in (f (f 77));
(proc (f) (f (f 77)) proc (x) -(x, 11));
let x = 200 in let f = proc (z) -(z, x) in let x = 100 in let g = proc (z) -(z, x) in -((f 1), (g 1));
letrec double (x) = if is_zero(x) then 0 else -((double -(x, 1)), -(0, 2))
in (double 6);
val minus_two = -(0, 2);
fun double (x) = if is_zero(x) then 0 else -((double -(x, 1)), minus_two);
(double -(10, minus_two));
let x = 30 in let x = -(x, 1) y = -(x, 2) in -(x, y);
letrec
  even (x) = if is_zero(x) then 1 else (odd -(x, 1))
  odd (x) = if is_zero(x) then 0 else (even -(x, 1))
in (odd 13);
val a = newref(1);
deref(a);
setref(a,(double deref(a))); 
deref(a);
val b = newref(10);
deref(a);
deref(b);
setref(b,11);
deref(a);
deref(b);
let x = newref(0)
in letrec
  even(dummy) = if is_zero(deref(x)) then 1 else begin setref(x, -(deref(x),1)); (odd 888) end
  odd(dummy) = if is_zero(deref(x)) then 0 else begin setref(x, -(deref(x),1)); (even 888) end
in begin setref(x, 13); (odd 888) end;
let g = let counter = newref(0)
        in proc (dummy)
             begin
               setref(counter, -(deref(counter),-(0,1)));
               deref(counter)
             end
in let a = (g 11)
   in let b = (g 11)
      in -(a, b);
let g = proc (dummy)
          let counter = newref(0)
          in
            begin
              setref(counter, -(deref(counter),-(0,1)));
              deref(counter)
            end
in let a = (g 11)
   in let b = (g 11)
      in -(a, b);
let x = newref(newref(0))
in begin
     setref(deref(x), 11);
     deref(deref(x))
   end;
let x = 4 in list(x, -(x, 1), -(x, 3));
let a = newref(0) in
let b = newref(1) in
let c = newref(2) in
let l = list(a, b, c) in
begin
  setref(a, 10);
  setref(b, 20);
  setref(c, 30);
  l
end;