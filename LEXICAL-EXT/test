let a = 5 in
  let b = 6 in
    -(b, -(a, 10));
-(123, 44);
is_zero(0);
is_zero(1);
let a = 5 in
  if is_zero(a) then 5 else 4;
let a = -(5, 5) in
  if is_zero(a) then 5 else 4;
let f = proc (x) -(x, 11) in (f (f 77));
(proc (f) (f (f 77)) proc (x) -(x, 11));
let x = 200 in let f = proc (z) -(z, x) in let x = 100 in let g = proc (z) -(z, x) in -((f 1), (g 1));
val minus_two = -(0, 2);
cond is_zero(0) ==> 1 is_zero(1) ==> 2 end;
cond is_zero(1) ==> 1 is_zero(0) ==> 2 end;
let add = proc (x) proc (y) -(x, -(0, y)) in ((add 12) 32);
let minus = proc (x) proc (y) -(x, y) in ((minus 5) 4);
let makemult =
  proc (maker)
    proc (x)
      if is_zero(x)
      then 0
      else -(((maker maker) -(x, 1)), -(0, 4))
in let times4 = proc (x) ((makemult makemult) x)
   in (times4 3);
let makemult =
  proc (maker)
    proc (x) proc (y)
      if is_zero(x)
      then 0
      else -((((maker maker) -(x, 1)) y), -(0, y))
in let mult = proc (x) proc (y) (((makemult makemult) x) y)
   in let makefac =
        proc (maker)
          proc (n)
            if is_zero(n)
            then 1
            else ((mult n) ((maker maker) -(n, 1)))
      in let fac = proc (n) ((makefac makefac) n)
         in (fac 10);
let true = is_zero(0)
in
  let false = is_zero(1)
  in
    let makeodd =
      proc (makerodd) proc (makereven)
        proc (x)
          if is_zero(x)
          then false
          else (((makereven makerodd) makereven) -(x, 1))
    in
      let makeeven =
        proc (makerodd) proc (makereven)
          proc (x)
            if is_zero(x)
            then true
            else (((makerodd makerodd) makereven) -(x, 1))
      in
        let odd = proc (x) (((makeodd makeodd) makeeven) x) in
        let even = proc (x) (((makeeven makeodd) makeeven) x) in
          (even 10);
let makerec =
  proc (f)
    (proc (m) proc (x) ((f (m m)) x)
     proc (m) proc (x) ((f (m m)) x))
in
  let maketimes4 = proc (f)
                     proc (x)
                       if is_zero(x)
                       then 0
                       else -((f -(x, 1)), -(0, 4))
  in let times4 = (makerec maketimes4)
     in (times4 3);
let makerec =
  proc (f)
    (proc (m) (f proc (x) ((m m) x))
     proc (m) (f proc (x) ((m m) x)))
in
  let maketimes4 = proc (f)
                     proc (x)
                       if is_zero(x)
                       then 0
                       else -((f -(x, 1)), -(0, 4))
  in let times4 = (makerec maketimes4)
     in (times4 3);
letrec double (x) = if is_zero(x) then 0 else -((double -(x, 1)), -(0, 2))
in (double 16);
let minus = proc (x, y) -(x, y) in (minus 5 4);
letrec mult (x, y) =
  if is_zero(x) then 0
  else -((mult -(x, 1) y), -(0, y)) in
letrec fac (n, ret) = if is_zero(n) then (ret 1) else (fac -(n, 1) proc (ans) (ret (mult n ans)))
in (fac 10 proc (ans) ans);
letrec
  even (x) = if is_zero(x) then 1 else (odd -(x, 1))
  odd (x) = if is_zero(x) then 0 else (even -(x, 1))
in (odd 13);
let x = 30 in let x = -(x, 1) y = -(x, 2) in -(x, y);
letrec test (n) = if is_zero(n) then 0 else -(n, -(0, (test -(n, 1))))
in (test 10000);
letrec test (n, ret) = if is_zero(n) then ret else (test -(n, 1) -(ret, -(0, n)))
in (test 10000 0);
